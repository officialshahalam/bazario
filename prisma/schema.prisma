// This is your Prisma schema file
// Updated to use singular model names

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String              @unique
  password             String?
  avatars              Image[]
  shopReviews          ShopReview[]
  followings           Follower[]
  addresses            Address[]
  orders               Order[]
  notifications        Notification[]      @relation("NotificationReceiver")
  createdNotifications Notification[]      @relation("NotificationCreator")
  createdConversations Conversation[]      @relation("ConversationCreator")
  participants         Participant[]
  messages             Message[]
  uniqueShopVisits     UniqueShopVisitor[]
  analytics            UserAnalytics?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Seller {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String         @unique
  phone_number  String
  avatars       Image[]
  country       String
  password      String
  stripeId      String?
  shop          Shop?
  discountCodes DiscountCode[]
  participants  Participant[]
  messages      Message[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isDeleted     Boolean        @default(false)
  deletedAt     DateTime?
}
 
model Shop {
  id               String              @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  bio              String?
  category         String
  avatars          Image[]
  coverBanner      String?
  address          String
  opening_hours    String?
  website          String?
  socialLinks      Json[]
  ratings          Float               @default(0)
  reviews          ShopReview[]
  followers        Follower[]
  seller           Seller              @relation(fields: [sellerId], references: [id])
  sellerId         String              @unique @db.ObjectId
  products         Product[]
  orders           Order[]
  analytics        ShopAnalytics?
  productAnalytics ProductAnalytics[]
  uniqueVisitors   UniqueShopVisitor[]
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  isDeleted        Boolean             @default(false)
  deletedAt        DateTime?
  imagesId         String?
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String?
  url       String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  seller    Seller?  @relation(fields: [sellerId], references: [id])
  sellerId  String?  @db.ObjectId
  shop      Shop?    @relation(fields: [shopId], references: [id])
  shopId    String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model ShopReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  shopId    String?  @db.ObjectId
  shop      Shop?    @relation(fields: [shopId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  shopId String @db.ObjectId
  shop   Shop?  @relation(fields: [shopId], references: [id])

  @@unique([userId, shopId])
}

model SiteConfig {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
  logo          String?
  banner        String?
}

model DiscountCode {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  seller        Seller   @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum ProductStatus {
  Active
  Pending
  Draft
}

model Product {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String            @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                Image[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float             @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?          @default(false)
  cashOnDelivery        String?
  discount_codes        String[]
  status                ProductStatus     @default(Active)
  totalSales            Int               @default(0)
  deletedAt             DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  shopId                String            @db.ObjectId
  shop                  Shop?             @relation(fields: [shopId], references: [id])
  analytics             ProductAnalytics?
  orderItems            OrderItem[]       @relation("ProductItemsRelation")
}

model UserAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  country         String?
  city            String?
  device          String?
  lastVisited     DateTime
  actions         Json?
  recommendations Json?
  lastTrained     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProductAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique @db.ObjectId
  product      Product  @relation(fields: [productId], references: [id])
  shopId       String   @db.ObjectId
  shop         Shop     @relation(fields: [shopId], references: [id])
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishListAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ShopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId        String   @unique @db.ObjectId
  shop          Shop     @relation(fields: [shopId], references: [id])
  totalVisitors Int      @default(0)
  countryStats  Json?
  cityStats     Json?
  deviceStats   Json?
  lastVisitedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model UniqueShopVisitor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  shop      Shop     @relation(fields: [shopId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  visitedAt DateTime @default(now())

  @@unique([shopId, userId])
}

model Order {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String      @db.ObjectId
  user              User        @relation(fields: [userId], references: [id])
  shopId            String      @db.ObjectId
  shop              Shop        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String      @default("Ordered")
  items             OrderItem[] @relation("OrderItemsRelation")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String   @db.ObjectId
  product         Product  @relation(fields: [productId], references: [id], name: "ProductItemsRelation")
  quantity        Int
  price           Float
  selectedOptions Json?
  order           Order    @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt       DateTime @default(now())
}

enum AddressType {
  Home
  Work
  Other
}

model Address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  label     AddressType @default(Home)
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Notification {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId     String   @db.ObjectId
  creator       User     @relation(fields: [creatorId], references: [id], name: "NotificationCreator")
  receiverId    String   @db.ObjectId
  receiver      User     @relation(fields: [receiverId], references: [id], name: "NotificationReceiver")
  redirect_link String?
  title         String
  message       String
  status        String   @default("Unread")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Conversation {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  isGroup        Boolean       @default(false)
  name           String?
  creatorId      String        @db.ObjectId
  creator        User          @relation(fields: [creatorId], references: [id], name: "ConversationCreator")
  participantIds String[]      @db.ObjectId
  participants   Participant[]
  messages       Message[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Participant {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String?      @db.ObjectId
  user           User?        @relation(fields: [userId], references: [id])
  sellerId       String?      @db.ObjectId
  seller         Seller?      @relation(fields: [sellerId], references: [id])
  lastSeenAt     DateTime?
  isOnline       Boolean      @default(false)
  unreadCount    Int          @default(0)
  muted          Boolean      @default(false)
  joinedAt       DateTime     @default(now())
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @db.ObjectId
  senderType     String
  userSender     User?        @relation(fields: [senderId], references: [id])
  sellerSender   Seller?      @relation(fields: [senderId], references: [id])
  content        String?
  attachments    String[]
  status         String       @default("sent")
  createdAt      DateTime     @default(now())

  @@unique([conversationId, senderId, content, createdAt])
}
