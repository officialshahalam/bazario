// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model users {
  id                   String               @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  email                String               @unique
  password             String?
  avatars              images[]
  following            String[]
  shopReviews          shopReviews[]
  addresses            address[]
  orders               orders[]
  notifications        notifications[]      @relation("NotificationReceiver")
  createdNotifications notifications[]      @relation("NotificationCreator")
  createdConversations conversationGroup[]  @relation("ConversationCreator")
  participants         participant[]
  messages             message[]
  uniqueShopVisits     uniqueShopVisitors[]
  analytics            userAnalytics?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
}

model sellers {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String           @unique
  phone_number  String
  country       String
  password      String
  stripeId      String?
  shop          shops?
  discountCodes discount_codes[]
  participants  participant[]
  messages      message[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model shops {
  id               String               @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  bio              String?
  category         String
  avatars          images[]
  coverBanner      String?
  address          String
  opening_hours    String
  website          String?
  socialLinks      Json[]
  ratings          Float                @default(0)
  reviews          shopReviews[]
  sellerId         String               @unique @db.ObjectId
  sellers          sellers              @relation(fields: [sellerId], references: [id])
  products         products[]
  orders           orders[]
  analytics        shopAnalytics?
  productAnalytics productAnalytics[]
  uniqueVisitors   uniqueShopVisitors[]
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model images {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  file_id   String
  url       String
  userId    String?   @db.ObjectId
  shopId    String?   @db.ObjectId
  users     users?    @relation(fields: [userId], references: [id])
  shops     shops?    @relation(fields: [shopId], references: [id])
  productId String?   @db.ObjectId
  products  products? @relation(fields: [productId], references: [id])
}

model shopReviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  rating    Float
  reviews   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId    String?  @db.ObjectId
  shops     shops?   @relation(fields: [shopId], references: [id])
}

model site_config {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  categories    String[]
  subCategories Json
}

model discount_codes {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  public_name   String
  discountType  String
  discountValue Float
  discountCode  String   @unique
  sellerId      String   @db.ObjectId
  seller        sellers  @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum productsStatus {
  Active
  Pending
  Draft
}

model products {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  slug                  String            @unique
  category              String
  subCategory           String
  short_description     String
  detailed_description  String
  images                images[]
  video_url             String?
  tags                  String[]
  brand                 String?
  colors                String[]
  sizes                 String[]
  starting_date         DateTime?
  ending_date           DateTime?
  stock                 Int
  sale_price            Float
  regular_price         Float
  ratings               Float             @default(0)
  warranty              String?
  custom_specifications Json?
  custom_properties     Json
  isDeleted             Boolean?          @default(false)
  cashOnDelivery        String?
  discount_codes        String[]          @db.ObjectId
  status                productsStatus    @default(Active)
  totalSales            Int               @default(0)
  deletedAt             DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  shopId                String            @db.ObjectId
  shops                 shops             @relation(fields: [shopId], references: [id])
  analytics             productAnalytics?
  orderItems            orderItems[]
}

model userAnalytics {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            users    @relation(fields: [userId], references: [id])
  country         String?
  city            String?
  device          String?
  lastVisited     DateTime
  actions         Json?
  recommendations Json?
  lastTrained     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model productAnalytics {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  productId    String   @unique @db.ObjectId
  product      products @relation(fields: [productId], references: [id])
  shopId       String   @db.ObjectId
  shop         shops    @relation(fields: [shopId], references: [id])
  views        Int      @default(0)
  cartAdds     Int      @default(0)
  wishListAdds Int      @default(0)
  purchases    Int      @default(0)
  lastViewedAt DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model shopAnalytics {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId        String   @unique @db.ObjectId
  shop          shops    @relation(fields: [shopId], references: [id])
  totalVisitors Int      @default(0)
  countryStats  Json? // { "US": 20, "IN": 50, "UK": 15 }
  cityStats     Json? // { "New York": 10, "Delhi": 25 }
  deviceStats   Json? // { "Mobile": 50, "Desktop": 30 }
  lastVisitedAt DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model uniqueShopVisitors {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shopId    String   @db.ObjectId
  shop      shops    @relation(fields: [shopId], references: [id])
  userId    String   @db.ObjectId
  user      users    @relation(fields: [userId], references: [id])
  visitedAt DateTime @default(now())

  @@unique([shopId, userId])
}

model orders {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  userId            String       @db.ObjectId
  user              users        @relation(fields: [userId], references: [id])
  shopId            String       @db.ObjectId
  shop              shops        @relation(fields: [shopId], references: [id])
  total             Float
  shippingAddressId String?
  couponCode        String?
  discountAmount    Float?
  status            String
  deliveryStatus    String       @default("Ordered")
  items             orderItems[] @relation("OrderItemsRelation")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model orderItems {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId         String   @db.ObjectId
  productId       String   @db.ObjectId
  product         products @relation(fields: [productId], references: [id])
  quantity        Int
  price           Float
  selectedOptions Json?
  orders          orders   @relation(fields: [orderId], references: [id], name: "OrderItemsRelation")
  createdAt       DateTime @default(now())
}

enum addressType {
  Home
  Work
  Other
}

model address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      users       @relation(fields: [userId], references: [id])
  label     addressType
  name      String
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean     @default(true)
  createdAt DateTime    @default(now())
}

model notifications {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  creatorId     String   @db.ObjectId
  creator       users    @relation(fields: [creatorId], references: [id], name: "NotificationCreator")
  receiverId    String   @db.ObjectId
  receiver      users    @relation(fields: [receiverId], references: [id], name: "NotificationReceiver")
  redirect_link String?
  title         String
  message       String
  status        String   @default("Unread")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model conversationGroup {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  isGroup        Boolean       @default(false)
  name           String?
  creatorId      String        @db.ObjectId
  creator        users         @relation(fields: [creatorId], references: [id], name: "ConversationCreator")
  participantIds String[]      @db.ObjectId
  participants   participant[]
  messages       message[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model participant {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String            @db.ObjectId
  conversation   conversationGroup @relation(fields: [conversationId], references: [id])
  userId         String?           @db.ObjectId
  user           users?            @relation(fields: [userId], references: [id])
  sellerId       String?           @db.ObjectId
  seller         sellers?          @relation(fields: [sellerId], references: [id])
  lastSeenAt     DateTime?
  isOnline       Boolean           @default(false)
  unreadCount    Int               @default(0)
  muted          Boolean           @default(false)
  joinedAt       DateTime          @default(now())
}

model message {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String            @db.ObjectId
  conversation   conversationGroup @relation(fields: [conversationId], references: [id])
  senderId       String            @db.ObjectId
  senderType     String
  userSender     users?            @relation(fields: [senderId], references: [id])
  sellerSender   sellers?          @relation(fields: [senderId], references: [id])
  content        String?
  attachments    String[]
  status         String            @default("sent")
  createdAt      DateTime          @default(now())

  @@unique([conversationId, senderId, content, createdAt])
}
